{"ast":null,"code":"export default function formValidations(data) {\n  const userValidations = {};\n  const fieldIsRequired = \"Field Is Reqired\";\n  if (!data.userName.trim()) {\n    userValidations.userName = fieldIsRequired;\n  }\n  if (!data.userEmail.trim()) {\n    userValidations.userEmail = fieldIsRequired;\n  } else if (!data.userEmail.trim().match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{3}$/)) {\n    userValidations.userEmail = \"Enter Valid Email\";\n  }\n  if (!data.userPhoneNo.trim()) {\n    userValidations.userPhoneNo = fieldIsRequired;\n  } else if (!data.userPhoneNo.trim().match(/^[0-9]{10}$/)) {\n    userValidations.userPhoneNo = \"Enter Valid PhoneNo\";\n  }\n  if (!validCountries.test(data.userCountry.trim())) {\n    userValidations.userCountry = \"Enter a valid country\";\n  }\n  if (!data.userAddress.trim()) {\n    userValidations.userAddress = fieldIsRequired;\n  }\n  if (!data.userPincode.trim()) {\n    userValidations.userPincode = fieldIsRequired;\n  }\n  if (!data.userPassword.trim()) {\n    userValidations.userPassword = fieldIsRequired;\n  }\n  setErrors(userValidations);\n  return Object.keys(userValidations).length === 0 ? true : false;\n}","map":{"version":3,"names":["formValidations","data","userValidations","fieldIsRequired","userName","trim","userEmail","match","userPhoneNo","validCountries","test","userCountry","userAddress","userPincode","userPassword","setErrors","Object","keys","length"],"sources":["C:/Restaurent_react/rome-restaurant/src/Utils/formValidations.jsx"],"sourcesContent":["\r\nexport default function formValidations(data) {\r\n   const userValidations = {};\r\n   const fieldIsRequired = \"Field Is Reqired\"\r\n   if (!data.userName.trim()) {\r\n      userValidations.userName = fieldIsRequired;\r\n   }\r\n   if (!data.userEmail.trim()) {\r\n      userValidations.userEmail = fieldIsRequired;\r\n   } else if (!data.userEmail.trim().match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{3}$/)) {\r\n      userValidations.userEmail = \"Enter Valid Email\";\r\n   }\r\n   if (!data.userPhoneNo.trim()) {\r\n      userValidations.userPhoneNo = fieldIsRequired;\r\n   }else if(!data.userPhoneNo.trim().match(/^[0-9]{10}$/)){\r\n      userValidations.userPhoneNo =\"Enter Valid PhoneNo\";\r\n   }\r\n  \r\n\r\nif (!validCountries.test(data.userCountry.trim())) {\r\n userValidations.userCountry = \"Enter a valid country\";\r\n}\r\n\r\n   if (!data.userAddress.trim()) {\r\n      userValidations.userAddress = fieldIsRequired;\r\n   }\r\n   if (!data.userPincode.trim()) {\r\n      userValidations.userPincode = fieldIsRequired;\r\n   }\r\n   if (!data.userPassword.trim()) {\r\n      userValidations.userPassword = fieldIsRequired;\r\n   }\r\n\r\n   setErrors(userValidations);\r\n\r\n   return (Object.keys(userValidations).length === 0) ? true : false;\r\n\r\n}\r\n"],"mappings":"AACA,eAAe,SAASA,eAAeA,CAACC,IAAI,EAAE;EAC3C,MAAMC,eAAe,GAAG,CAAC,CAAC;EAC1B,MAAMC,eAAe,GAAG,kBAAkB;EAC1C,IAAI,CAACF,IAAI,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE;IACxBH,eAAe,CAACE,QAAQ,GAAGD,eAAe;EAC7C;EACA,IAAI,CAACF,IAAI,CAACK,SAAS,CAACD,IAAI,CAAC,CAAC,EAAE;IACzBH,eAAe,CAACI,SAAS,GAAGH,eAAe;EAC9C,CAAC,MAAM,IAAI,CAACF,IAAI,CAACK,SAAS,CAACD,IAAI,CAAC,CAAC,CAACE,KAAK,CAAC,gCAAgC,CAAC,EAAE;IACxEL,eAAe,CAACI,SAAS,GAAG,mBAAmB;EAClD;EACA,IAAI,CAACL,IAAI,CAACO,WAAW,CAACH,IAAI,CAAC,CAAC,EAAE;IAC3BH,eAAe,CAACM,WAAW,GAAGL,eAAe;EAChD,CAAC,MAAK,IAAG,CAACF,IAAI,CAACO,WAAW,CAACH,IAAI,CAAC,CAAC,CAACE,KAAK,CAAC,aAAa,CAAC,EAAC;IACpDL,eAAe,CAACM,WAAW,GAAE,qBAAqB;EACrD;EAGH,IAAI,CAACC,cAAc,CAACC,IAAI,CAACT,IAAI,CAACU,WAAW,CAACN,IAAI,CAAC,CAAC,CAAC,EAAE;IAClDH,eAAe,CAACS,WAAW,GAAG,uBAAuB;EACtD;EAEG,IAAI,CAACV,IAAI,CAACW,WAAW,CAACP,IAAI,CAAC,CAAC,EAAE;IAC3BH,eAAe,CAACU,WAAW,GAAGT,eAAe;EAChD;EACA,IAAI,CAACF,IAAI,CAACY,WAAW,CAACR,IAAI,CAAC,CAAC,EAAE;IAC3BH,eAAe,CAACW,WAAW,GAAGV,eAAe;EAChD;EACA,IAAI,CAACF,IAAI,CAACa,YAAY,CAACT,IAAI,CAAC,CAAC,EAAE;IAC5BH,eAAe,CAACY,YAAY,GAAGX,eAAe;EACjD;EAEAY,SAAS,CAACb,eAAe,CAAC;EAE1B,OAAQc,MAAM,CAACC,IAAI,CAACf,eAAe,CAAC,CAACgB,MAAM,KAAK,CAAC,GAAI,IAAI,GAAG,KAAK;AAEpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}